#+OPTIONS:   H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+STYLE:    <link rel="stylesheet" type="text/css" href="../assets/css/stylesheet.css" />

Hello World Assignment for Introductory Programmers

* Introduction
  This is a sampling of what the first homework assignment for a computer
  science student would look like under different language
  implementations. I give my opinion on each by
  line number below.

* Jackson Five (Hello World)
  The task is to make a program that takes five command line arguments
  and prints out a proper sentence with the arguments in the reverse order.
** Java
#+begin_src java -n
public class HiFive {

    public static void main(String[] args) {
        System.out.println(args[4] + ", " + args[3] + ", " + args[2] +
        ", " + args[1] + ", and " + args[0] + " formed the original
        Jackson 5."); }

}
#+end_src

    - 1 :: The declaration of a class in this context is completely
           irrelevant. Moreover, it draws attention away from what is
           actually happening.
    - 3 :: As a result of forced OOP, the Java main method requires
           a ~static~ declaration.
    - 4 ::  ~System.out.println()~ cannot be properly understood at this
            stage. It is simply the equivalent of ~print~ for the time
            being.            
    - 1,3 :: The use of the ~public~ keyword further obfuscates the
             meaning behind the code.

** Python

#+begin_src python -n
import sys

def main():
    print '{}, {}, {}, {}, and {} formed the original Jackson 5.'.format(
        sys.argv[5], sys.argv[4], sys.argv[3], sys.argv[2], sys.argv[1])

if __name__ == '__main__':
    main()
#+end_src

   - 1 :: Using an import statement this early can be difficult to
          understand, however Python places no restrictions on
          header/source files like C. Eventually, students will need
          to learn how to import modules.
   - 3 :: Unlike C-style languages, ~main~ need not take arguments.
   - 7,8 :: To Python's chagrin, these lines are the true equivalent
            of a "Main Method" which could cause confusion.

** C

#+begin_src c -n
  #include <stdio.h>
  
  main(int argc, char *argv[]) {
      printf("%s, %s, %s, %s, and %s formed the original Jackson 5.\n",
             argv[5], argv[4], argv[3], argv[2], argv[1]);
  }
#+end_src

   - 1 :: Again, the include statement begs for more discussion. With
          C however, it's a little more complicated because there is a
          distinction between header and source files.
   - 3 :: Unlike Java, a function need not have a type if it is
          void. I find this makes it easier to narrow the scope of
          learning at this stage, and defer return types to a later
          stage of the introduction when they become relevant.
   - 3 :: Unfortunately, pointers rear their heads even in the most
          basic of programs, so some explanation of =*= in this
          context will be required, and may be confusing, but students
          should not have to deal with pointer types other than
          strings for quite some time.
   - 4 :: Format strings are unavoidable in this context, but I
          believe they are useful enough to present themselves early
          on.

